generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  password          String
  role              String             @default("EDITOR")
  departmentId      Int?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  harmonogramBlocks HarmonogramBlock[]
  assignedTasks     Task[]             @relation("AssignedTo")
  createdTasks      Task[]             @relation("CreatedBy")
  department        Department?        @relation(fields: [departmentId], references: [id])
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String   @default("#808080")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brands    Brand[]
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String
  clientId  Int
  color     String   @default("#808080")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@unique([name, clientId])
}

model Task {
  id                Int                @id @default(autoincrement())
  title             String
  description       String?
  priority          Int                @default(2)
  estimatedTime     Float
  brandId           Int
  createdById       Int
  assignedToId      Int?
  expiryDate        DateTime?
  notes             String?
  links             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  harmonogramBlocks HarmonogramBlock[]
  assignedTo        User?              @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy         User               @relation("CreatedBy", fields: [createdById], references: [id])
  brand             Brand              @relation(fields: [brandId], references: [id])
}

model HarmonogramBlock {
  id            Int       @id @default(autoincrement())
  taskId        Int
  userId        Int
  date          DateTime
  allocatedTime Float
  isLocked      Boolean   @default(false)
  lockedUntil   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  task          Task      @relation(fields: [taskId], references: [id])

  @@unique([taskId, userId, date])
}

model Settings {
  key       String   @id
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}
